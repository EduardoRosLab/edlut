dnl cuda3.m4 --- check for Cuda software.
dnl
dnl Copyright (C) 2013 Jesus Garrido based on a previous MATLAB version by Ralph Schleicher
dnl
dnl This program is free software; you can redistribute it and/or
dnl modify it under the terms of the GNU General Public License as
dnl published by the Free Software Foundation; either version 2,
dnl or (at your option) any later version.
dnl
dnl This program is distributed in the hope that it will be useful,
dnl but WITHOUT ANY WARRANTY; without even the implied warranty of
dnl MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
dnl GNU General Public License for more details.
dnl
dnl You should have received a copy of the GNU General Public License
dnl along with this program; see the file COPYING.  If not, write to
dnl the Free Software Foundation, Inc., 59 Temple Place, Suite 330,
dnl Boston, MA 02111-1307, USA.
dnl
dnl As a special exception to the GNU General Public License, if
dnl you distribute this file as part of a program that contains a
dnl configuration script generated by GNU Autoconf, you may include
dnl it under the same distribution terms that you use for the rest
dnl of that program.
dnl
dnl Code:

# AX_CUDA
# ---------
# Check for Cuda.
AC_DEFUN([AX_CUDA],
[dnl
AC_PREREQ([2.50])
ax_enable_cuda=AC_ARG_WITH([cuda], AS_HELP_STRING([--with-cuda], [check for Cuda [[yes]]]),
    [case $withval in
	  yes | no)
	    # Explicitly enable or disable Cuda but determine
	    # Cuda prefix automatically.
	    ax_enable_cuda=$withval
	    ;;
	  *)
	    # Enable Cuda and use ARG as the Cuda prefix.
	    # ARG must be an existing directory.
	    ax_enable_cuda=yes
	    CUDA=`cd "${withval-/}" > /dev/null 2>&1 && pwd`
	    if test -z "$CUDA" ; then
		AC_MSG_ERROR([invalid value '$withval' for --with-cuda])
	    fi
	    ;;
	esac])

if test x$ax_enable_cuda == xno ; then
	AC_MSG_CHECKING([whether to enable Cuda support])
	AC_MSG_RESULT([$ax_enable_cuda])
else
	AC_CACHE_CHECK([for Cuda prefix], [ax_cv_cuda],
	[if test "${CUDA+set}" = set ; then
	    ax_cv_cuda=`cd "${CUDA-/}" > /dev/null 2>&1 && pwd`
	else
	    ax_cv_cuda=
	    IFS=${IFS= 	} ; ax_ifs=$IFS ; IFS=:
	    for ax_dir in ${PATH-/opt/bin:/usr/local/bin:/usr/bin:/bin} ; do
		if test -z "$ax_dir" ; then
		    ax_dir=.
		fi
		if test -x "$ax_dir/nvcc" ; then
		    ax_dir=`echo "$ax_dir" | sed 's,/bin$,,'`
		    # Directory sanity check.
		    ax_cv_cuda=`cd "${ax_dir-/}" > /dev/null 2>&1 && pwd`
		    if test -n "$ax_cv_cuda" ; then
			break
		    fi
		fi
	    done
	    IFS=$ax_ifs
	fi
	if test -z "$ax_cv_cuda" ; then
	    ax_cv_cuda="not found"
	fi])
	if test "$ax_cv_cuda" = "not found" ; then
	    unset CUDA
	else
	    # Strip trailing dashes.
	    CUDA=`echo "$ax_cv_cuda" | sed 's,/*$,,'`
	fi
	AC_MSG_CHECKING([whether to enable Cuda support])
	if test x$ax_enable_cuda != xno ; then
	    if test "${CUDA+set}" = set && test -d "$CUDA/include" && test -d "$CUDA/lib" ; then
		ax_enable_cuda=yes
	    elif test x$ax_enable_cuda = x ; then
		ax_enable_cuda=no
	    else
		# Fail if Matlab was explicitly enabled.
		AC_MSG_RESULT([failure])
		AC_MSG_ERROR([check your Cuda setup])
	    fi
	fi
	AC_MSG_RESULT([$ax_enable_cuda])
	if test x$ax_enable_cuda = xyes ; then
	    AC_DEFINE([HAVE_CUDA], [1], [Define if you have Cuda.])
	fi
fi
AC_SUBST([CUDA])
])

# AX_REQUIRE_CUDA
# -----------------
# Like AX_MATLAB but fail if Matlab support is disabled.
AC_DEFUN([AX_REQUIRE_CUDA],
[dnl
AC_PREREQ([2.50])
AC_REQUIRE([AX_CUDA])
if test x$ax_enable_cuda = xno ; then
    AC_MSG_ERROR([can not enable Cuda support])
fi
])

# AX_CUDA_CONDITIONAL
# ---------------------
# Define Cuda conditional for GNU Automake.
AC_DEFUN([AX_CUDA_CONDITIONAL],
[dnl
AC_PREREQ([2.50])
AC_REQUIRE([AX_CUDA])
AM_CONDITIONAL([CUDA], [test x$ax_enable_cuda = xyes])
])

dnl cuda3.m4 ends here
